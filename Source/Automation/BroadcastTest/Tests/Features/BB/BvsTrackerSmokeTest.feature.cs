// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.1.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace BroadcastTest.Tests.Features.BB
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("BvsTrackerSmokeTest")]
    [NUnit.Framework.IgnoreAttribute("Ignored feature")]
    public partial class BvsTrackerSmokeTestFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "BvsTrackerSmokeTest.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "BvsTrackerSmokeTest", null, ProgrammingLanguage.CSharp, new string[] {
                        "ignore"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Schedule Data has been preloaded")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
        public virtual void ScheduleDataHasBeenPreloaded()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Schedule Data has been preloaded", new string[] {
                        "ignore"});
#line 5
this.ScenarioSetup(scenarioInfo);
#line 6
 testRunner.Given("I am on the BVS Tracker screen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 7
 testRunner.When("Schedule Data finishes loading", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Schedule",
                        "Advertiser",
                        "Estimate",
                        "Start Date",
                        "End Date",
                        "Spots Booked",
                        "Spots Delivered",
                        "Out of Spec",
                        "Posting Book",
                        "Primary Demo Booked Imp.",
                        "Primary Demo Delivered Imp."});
#line 8
 testRunner.Then("I should see the following Schedule data", ((string)(null)), table1, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Validate all station rates using Excel")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
        public virtual void ValidateAllStationRatesUsingExcel()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate all station rates using Excel", new string[] {
                        "ignore"});
#line 14
this.ScenarioSetup(scenarioInfo);
#line 15
 testRunner.Given("I am on the BVS Tracker screen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "FilePath",
                        "FileName"});
            table2.AddRow(new string[] {
                        "C:\\Users\\bbernstein\\Documents\\Visual Studio 2013\\Projects\\BroadcastAutoTest\\Broad" +
                            "castTest\\Test Data\\Rate Data\\BCOP-52",
                        "Atlanta.WPCH.SYN 4Q16.xls"});
#line 16
 testRunner.Then("I validate all station rates in UI using the Excel file for station \'WPCH-TV 17.1" +
                    "\'", ((string)(null)), table2, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Upload and validate all station rates using Excel")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
        public virtual void UploadAndValidateAllStationRatesUsingExcel()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Upload and validate all station rates using Excel", new string[] {
                        "ignore"});
#line 21
this.ScenarioSetup(scenarioInfo);
#line 22
 testRunner.Given("I am on the Rate Card screen with rate data loaded successfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "FilePath",
                        "FileName"});
            table3.AddRow(new string[] {
                        "C:\\Users\\bbernstein\\Documents\\Visual Studio 2013\\Projects\\BroadcastAutoTest\\Broad" +
                            "castTest\\Test Data\\Rate Data\\BCOP-52",
                        "Atlanta.WPCH.SYN.avWPCHTV8317325_1.xml"});
#line 23
 testRunner.When("I upload xml file containing new rate data", ((string)(null)), table3, "When ");
#line 26
 testRunner.And("Upload completed successfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "FilePath",
                        "FileName"});
            table4.AddRow(new string[] {
                        "C:\\Users\\bbernstein\\Documents\\Visual Studio 2013\\Projects\\BroadcastAutoTest\\Broad" +
                            "castTest\\Test Data\\Rate Data\\BCOP-52",
                        "Atlanta.WPCH.SYN 4Q16.xls"});
#line 27
 testRunner.Then("I validate all station rates in UI using the Excel file", ((string)(null)), table4, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
