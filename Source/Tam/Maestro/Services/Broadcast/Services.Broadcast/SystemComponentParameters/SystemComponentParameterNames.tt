<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ Assembly Name="System.Data" #>
<#@ assembly name="System.Configuration" #>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #>
<#@ import namespace="System.Configuration" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="System.Data.SqlClient" #>
<#@ import namespace="System.IO" #>
<#@ output extension=".cs" #>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Tam.Maestro.Common.SystemComponentParameter
{	<#
	    Dictionary<string, Dictionary<string, string>> _SystemComponent = new Dictionary<string,Dictionary<string,string>>();

		var map = new ExeConfigurationFileMap();
		map.ExeConfigFilename = this.Host.ResolvePath(@"..\App.config");
		var config = ConfigurationManager.OpenMappedExeConfiguration(map, ConfigurationUserLevel.None);
		var connectionString = config.ConnectionStrings.ConnectionStrings["MaestroDBForCodeGeneration"].ConnectionString;
		SqlConnection conn = new SqlConnection(connectionString);
		conn.Open();
		string command = "select * from system_component_parameters";
		SqlCommand comm = new SqlCommand(command, conn);
		
			SqlDataReader reader = comm.ExecuteReader();
			bool moreRecords = reader.Read();
			while(moreRecords)
			{
				var componentId = reader["component_id"].ToString();
				var parameterKey = reader["parameter_key"].ToString();
				var parameterType = (reader["parameter_type"] is DBNull || reader["parameter_type"] == null) ? "string" : reader["parameter_type"].ToString();
				if (!_SystemComponent.ContainsKey(componentId))
				{
					_SystemComponent.Add(componentId, new Dictionary<string, string>());
				}

				var propertyDictionary = _SystemComponent[componentId];
				if (!propertyDictionary.ContainsKey(parameterKey))
				{
					propertyDictionary.Add(parameterKey, parameterType);
				}
				else
				{
					propertyDictionary[parameterKey] = parameterType;
				}
			
				moreRecords = reader.Read();
			}
	
			reader.Close();
			conn.Close();
	#>
	<#
		foreach(string componentId in _SystemComponent.Keys)
		{
			var propertyDictionary = _SystemComponent[componentId];
    #> 
	public static class <#= componentId #>SystemParameterNames
	{
		public static string ComponentID
        {
            get { return "<#= componentId #>" ; }
        }
	 <#	foreach(string parameterKey in propertyDictionary.Keys)
		{
	  #> 
		public static string <#= parameterKey #>  
		{
            get { return "<#= parameterKey #>"; }
        }
	<#
	}
	#>}
	<#
	}
	#> 
}